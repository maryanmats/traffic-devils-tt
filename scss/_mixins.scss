@mixin flex(
  $direction: row,
  $align: stretch,
  $justify: flex-start,
  $wrap: wrap
) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  flex-wrap: $wrap;
}

@mixin flex-calc($gapMax: 30, $quantity: 2, $grow: 1, $shrink: 1) {
  flex: $grow $shrink calc((100% - rem($gapMax) * ($quantity - 1)) / $quantity);
}

@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }

  $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;
  $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp("
      rem($startSize)
      ","
      $flyValue
      ","
      rem($minSize)
      ")"};
  }

  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }

  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}

@mixin icon-av($icon-name, $icon-color, $size-big, $size-small) {
  @if map-has-key($icons, $icon-name) {
    @extend %i-icon;

    $icon-data: map-safe-get($icons, $icon-name);

    &::before {
      background-image: url(svg-icon-get($icon-data, $icon-color));
      @include adaptiveValue("height", $size-big, $size-small);
      @include adaptiveValue("width", $size-big, $size-small);
    }
  } @else {
    @error 'There is no key `#{$icon-name}` in the list of keys `#{map-keys($icons)}`';
  }
}

@mixin update-icon-av($icon-name, $icon-color) {
  @if map-has-key($icons, $icon-name) {
    $icon-data: map-safe-get($icons, $icon-name);

    &::before {
      background-image: url(svg-icon-get($icon-data, $icon-color));
    }
  } @else {
    @error 'There is no key `#{$icon-name}` in the list of keys `#{map-keys($icons)}`';
  }
}
